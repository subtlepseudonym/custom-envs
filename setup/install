#!/usr/bin/env bash
# Credit for quite a bit of functionality goes to Zach Holman
# https://github.com/holman/dotfiles/blob/master/script/bootstrap

cd "$(dirname "${0}")/.."
dotfiles_root="$(pwd -P)"
workspace="${HOME}/workspace"

info () {
	printf "\r	[ \033[00;34m..\033[0m ] $1\n"
}

user () {
	printf "\r	[ \033[0;33m??\033[0m ] $1\n"
}

success () {
	printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

error () {
	printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
}

install_workspace () {
	mkdir -p \
		"${workspace}/bin" \
		"${workspace}/doc" \
		"${workspace}/git" \
		"${workspace}/manifest" \
		"${workspace}/sandbox" \
		"${workspace}/script" \
		"${workspace}/volume"
	success "installed workspace"
}

link_file () {
	local src=$1 dst=$2

	local overwrite= backup= skip=
	local action=

	if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
	then

		if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
		then

			local currentSrc="$(readlink $dst)"

			if [ "$currentSrc" == "$src" ]
			then

				skip=true;

			else

				user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
				[s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
				read -n 1 action

				case "$action" in
					o )
						overwrite=true;;
					O )
						overwrite_all=true;;
					b )
						backup=true;;
					B )
						backup_all=true;;
					s )
						skip=true;;
					S )
						skip_all=true;;
					* )
						;;
				esac

			fi

		fi

		overwrite=${overwrite:-$overwrite_all}
		backup=${backup:-$backup_all}
		skip=${skip:-$skip_all}

		if [ "$overwrite" == "true" ]
		then
			rm -rf "$dst"
			success "removed $dst"
		fi

		if [ "$backup" == "true" ]
		then
			mv "$dst" "${dst}.bak"
			success "moved $dst to ${dst}.bak"
		fi

		if [ "$skip" == "true" ]
		then
			success "skipped $src"
		fi
	fi

	if [ "$skip" != "true" ]	# "false" or empty
	then
		ln -s "$1" "$2"
		success "linked $1 to $2"
	fi
}

install_links () {
	local overwrite_all=false backup_all=false skip_all=false

	for src in $(find -H "${dotfiles_root}" -maxdepth 2 -name '*.link' -not -path '*.git*')
	do
		dst="${HOME}/.$(basename "${src%.*}")"
		link_file "${src}" "${dst}"
	done
}

install_scripts () {
	for src in $(find -H "${dotfiles_root}" -maxdepth 2 -name '*.script' -not -path '*.git*')
	do
		dst="${workspace}/script/$(basename "${src%.script}")"
		cp "${src}" "${dst}"
		if [[ $? -eq 0 ]]; then
			success "copied ${src} to ${dst}"
		else
			error "could not copy ${src} to ${dst}"
		fi
	done
}
